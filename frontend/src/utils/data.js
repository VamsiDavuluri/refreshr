// src/data.js

// Shuffles an array in place.
const shuffleArray = (array) => {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
};

// Selects N random questions from a category.
const getQuizQuestions = (category, numQuestions) => {
  const questions = allQuestions[category];
  if (!questions || questions.length === 0) {
    return [];
  }
  const shuffled = shuffleArray([...questions]);
  return shuffled.slice(0, numQuestions);
};


const allQuestions = {
  dsa: [
    { question: "What is the time complexity of building a heap from an array of N elements?", options: ["O(N log N)", "O(N)", "O(log N)", "O(N^2)"], answer: "O(N)", explanation: "While each 'heapify' operation on a node can take O(log N), the build_heap algorithm is more efficient. The total work is a sum that converges to a linear O(N) complexity, not O(N log N)." },
    { question: "Which of the following sorting algorithms is NOT a comparison-based sort?", options: ["Merge Sort", "Quick Sort", "Heap Sort", "Counting Sort"], answer: "Counting Sort", explanation: "Counting Sort does not compare elements. It works by counting the number of objects having distinct key values, making it an integer sorting algorithm with O(n+k) complexity." },
    { question: "A red-black tree with N nodes has a maximum possible height of:", options: ["~log₂(N)", "~2 * log₂(N)", "~N", "~N/2"], answer: "~2 * log₂(N)", explanation: "A red-black tree maintains a balance property ensuring that the longest path from the root to any leaf is no more than twice as long as the shortest path, guaranteeing a height of O(log N)." },
    { question: "In the context of dynamic programming, what is memoization?", options: ["A recursive approach without storing results", "An optimization technique storing results of expensive function calls", "A method for sorting arrays", "A greedy algorithm strategy"], answer: "An optimization technique storing results of expensive function calls", explanation: "Memoization is a top-down dynamic programming technique that caches the results of function calls and returns the cached result when the same inputs occur again, avoiding redundant computations." },
    { question: "What is the worst-case time complexity of Quick Sort?", options: ["O(N log N)", "O(N)", "O(N^2)", "O(log N)"], answer: "O(N^2)", explanation: "The worst-case occurs when the pivot element is always the smallest or largest element, leading to an unbalanced partition and a complexity of O(N^2)." },
    { question: "What does 'amortized analysis' refer to in algorithms?", options: ["Worst-case analysis", "Average-case analysis", "Analyzing a sequence of operations to find the average cost", "Best-case analysis"], answer: "Analyzing a sequence of operations to find the average cost", explanation: "Amortized analysis gives the average cost of an operation in a sequence, even if some individual operations in that sequence are very costly." },
    { question: "Which complexity class represents an algorithm whose time doubles for every single addition to the input size?", options: ["O(log N)", "O(N)", "O(N^2)", "O(2^N)"], answer: "O(2^N)", explanation: "Exponential time complexity, O(2^N), means the running time grows exponentially with the input size. This is characteristic of problems like finding all subsets of a set." },
    { question: "The Master Theorem can be used to solve which type of recurrence relations?", options: ["All recurrence relations", "Only linear recurrence relations", "Divide and conquer recurrences of the form T(n) = aT(n/b) + f(n)", "Only logarithmic recurrence relations"], answer: "Divide and conquer recurrences of the form T(n) = aT(n/b) + f(n)", explanation: "The Master Theorem provides a cookbook-style solution for analyzing divide-and-conquer algorithms that follow its specific structural form." },
    { question: "Which algorithm is used to find the minimum spanning tree in a dense graph most efficiently?", options: ["Kruskal's Algorithm", "Prim's Algorithm", "Dijkstra's Algorithm", "Floyd-Warshall Algorithm"], answer: "Prim's Algorithm", explanation: "Prim's algorithm, when implemented with a Fibonacci heap, has a time complexity of O(E + V log V), which is generally better for dense graphs (where E is close to V^2) than Kruskal's O(E log V)." },
    { question: "What problem does Dijkstra's algorithm fail to solve?", options: ["Single source shortest path", "Graphs with negative weight edges", "Graphs with cycles", "All-pairs shortest path"], answer: "Graphs with negative weight edges", explanation: "Dijkstra's greedy approach doesn't work for graphs with negative edge weights, as it can prematurely finalize the shortest path to a node." },
    { question: "The Floyd-Warshall algorithm is used for:", options: ["Single source shortest path", "Minimum spanning tree", "All-pairs shortest path", "Topological sorting"], answer: "All-pairs shortest path", explanation: "It's a dynamic programming algorithm that finds the shortest paths between all pairs of vertices in a weighted graph." },
    { question: "Topological Sort can be applied to which kind of graphs?", options: ["Directed Acyclic Graphs (DAGs)", "Undirected graphs", "Complete graphs", "Cyclic graphs"], answer: "Directed Acyclic Graphs (DAGs)", explanation: "Topological sorting is a linear ordering of vertices such that for every directed edge from vertex u to vertex v, u comes before v. This is only possible if the graph has no directed cycles." },
    { question: "Bellman-Ford algorithm is used to find the single-source shortest paths in a graph with:", options: ["Only positive weights", "No cycles", "Negative weight edges", "Only unweighted edges"], answer: "Negative weight edges", explanation: "Unlike Dijkstra's, the Bellman-Ford algorithm can handle graphs with negative edge weights and can also detect negative weight cycles." },
    { question: "An articulation point (or cut vertex) in a graph is a vertex whose removal:", options: ["Disconnects the graph", "Increases the number of connected components", "Reduces the number of edges", "Creates a cycle"], answer: "Increases the number of connected components", explanation: "Removing an articulation point splits a connected component into multiple components, making it a critical point for network connectivity." },
    { question: "Kosaraju's algorithm is used to find what in a directed graph?", options: ["Minimum Spanning Tree", "Shortest Path", "Strongly Connected Components", "Bridges"], answer: "Strongly Connected Components", explanation: "Kosaraju's algorithm efficiently finds the strongly connected components of a directed graph by performing two depth-first searches." },
    { question: "Which data structure is ideal for implementing a priority queue?", options: ["Stack", "Queue", "Heap", "Array"], answer: "Heap", explanation: "A heap (specifically a min-heap or max-heap) provides efficient O(log N) insertion and O(log N) deletion of the highest priority element." },
    { question: "A B-Tree of order m can have a maximum of how many children per node?", options: ["m-1", "m", "m+1", "2m"], answer: "m", explanation: "By definition, a B-Tree of order 'm' has at most 'm' children for any given node." },
    { question: "The AVL tree is a type of:", options: ["Binary Heap", "Self-balancing binary search tree", "Hash Table", "Trie"], answer: "Self-balancing binary search tree", explanation: "AVL trees maintain a balance factor for each node and perform rotations to ensure the tree remains balanced, guaranteeing O(log N) operations." },
    { question: "A 'Trie' data structure is most commonly used for operations involving:", options: ["Numerical data", "Graph data", "Sets of strings or dictionary lookups", "Image processing"], answer: "Sets of strings or dictionary lookups", explanation: "A Trie (or prefix tree) is a tree-like data structure that is very efficient for storing and retrieving strings, with applications like autocomplete." },
    { question: "What is the primary advantage of a hash table over a balanced binary search tree for lookups?", options: ["Better worst-case performance", "Lower memory usage", "O(1) average-case time complexity", "Easier to implement"], answer: "O(1) average-case time complexity", explanation: "With a good hash function, hash tables provide constant time O(1) lookups on average, which is faster than the O(log N) of balanced trees. However, their worst-case is O(N)." },
    { question: "What distinguishes a 'Deque' from a standard queue?", options: ["It uses LIFO principle", "Elements can be added or removed from both ends", "It can only store integers", "It is a self-balancing structure"], answer: "Elements can be added or removed from both ends", explanation: "A Deque (double-ended queue) is a generalized queue that allows efficient insertion and deletion at both its front and back." },
    { question: "A 'Segment Tree' is a data structure primarily used for:", options: ["String matching", "Sorting large datasets", "Answering range queries over an array", "Storing graph adjacencies"], answer: "Answering range queries over an array", explanation: "Segment trees are powerful for handling range queries (like finding the sum, minimum, or maximum over an interval of an array) and can also support point updates efficiently." },
    { question: "In a hash table, what is the purpose of a 'rehashing'?", options: ["To find a new key for an object", "To resize the hash table and redistribute elements when the load factor is too high", "To delete an element", "To encrypt the keys"], answer: "To resize the hash table and redistribute elements when the load factor is too high", explanation: "Rehashing is the process of creating a new, larger hash table and re-inserting all existing elements into it to maintain performance and reduce collisions." },
    { question: "What is the purpose of the Knuth-Morris-Pratt (KMP) algorithm?", options: ["Graph traversal", "String searching", "Array sorting", "Finding prime numbers"], answer: "String searching", explanation: "The KMP algorithm is an efficient string matching algorithm that avoids re-comparing characters by using information from previously matched characters, using a precomputed LPS (Longest Proper Prefix which is also Suffix) array." },
    { question: "Which of these is a 'divide and conquer' algorithm?", options: ["Bubble Sort", "Insertion Sort", "Merge Sort", "Selection Sort"], answer: "Merge Sort", explanation: "Merge Sort works by recursively dividing the array into halves, sorting them, and then merging them back together." },
    { question: "The 'Maximum Flow Min-Cut' theorem states that in a flow network, the maximum flow from source to sink is equal to:", options: ["The number of edges", "The number of vertices", "The minimum capacity of a cut separating the source and sink", "The sum of all edge capacities"], answer: "The minimum capacity of a cut separating the source and sink", explanation: "This fundamental theorem establishes a duality between the maximum flow problem and the minimum cut problem in a network, forming the basis for algorithms like Ford-Fulkerson." },
    { question: "A 'Greedy Algorithm' makes the choice that seems:", options: ["Best at the current moment", "To lead to a globally optimal solution", "Random", "Worst at the current moment to save the best for later"], answer: "Best at the current moment", explanation: "A greedy algorithm builds up a solution piece by piece, always choosing the next piece that offers the most obvious and immediate benefit, without regard for future consequences." },
    { question: "The Rabin-Karp algorithm uses what technique for efficient string matching?", options: ["Dynamic Programming", "Hashing", "Divide and Conquer", "Greedy approach"], answer: "Hashing", explanation: "Rabin-Karp uses a rolling hash function to quickly check if a substring's hash matches the pattern's hash, reducing the number of direct character comparisons needed." },
    { question: "Which problem is typically solved using backtracking?", options: ["Finding the shortest path", "Sorting an array", "The N-Queens problem", "Finding the minimum spanning tree"], answer: "The N-Queens problem", explanation: "Backtracking is an algorithmic technique for solving problems recursively by trying to build a solution incrementally, one piece at a time, and removing those solutions that fail to satisfy the constraints of the problem at any point in time." },
    { question: "What is the space complexity of an in-place sorting algorithm?", options: ["O(N)", "O(log N)", "O(1)", "O(N^2)"], answer: "O(1)", explanation: "An in-place algorithm is one that transforms input using no auxiliary data structure, requiring only a small, constant amount of extra storage space, denoted as O(1)." },
    { question: "Which data structure would be most efficient for finding the k-th smallest element in a set?", options: ["Heap", "Hash Table", "Order Statistic Tree", "Stack"], answer: "Order Statistic Tree", explanation: "An Order Statistic Tree is an augmented balanced binary search tree (like a Red-Black Tree) where each node stores the size of its subtree, allowing the k-th smallest element to be found in O(log N) time." },
    { question: "A 'Bloom Filter' is a probabilistic data structure used to test:", options: ["If an element is a member of a set", "The size of a set", "The sum of elements in a set", "The sorted order of a set"], answer: "If an element is a member of a set", explanation: "A Bloom Filter can definitively say if an element is *not* in a set, but can only say it *might be* in the set (with a possibility of false positives). It's extremely space-efficient." },
    { question: "In a 'skip list', what is the primary purpose of the multiple levels of pointers?", options: ["To store different data types", "To speed up search operations by allowing skips over elements", "To ensure the list is sorted", "To connect to other skip lists"], answer: "To speed up search operations by allowing skips over elements", explanation: "A skip list uses a hierarchy of linked lists to create express lanes, allowing searches, insertions, and deletions to be performed in O(log N) average time, similar to a balanced tree." },
    { question: "The A* search algorithm is a combination of Dijkstra's algorithm and:", options: ["Breadth-First Search", "Depth-First Search", "Best-First Search (a greedy heuristic)", "Random Search"], answer: "Best-First Search (a greedy heuristic)", explanation: "A* combines the cost-from-start function of Dijkstra's (g(n)) with a heuristic estimate of the cost-to-goal (h(n)), making it an informed search algorithm." },
    { question: "What does it mean for a sorting algorithm to be 'stable'?", options: ["It has a guaranteed time complexity", "It works for any data type", "It maintains the relative order of records with equal keys", "It runs in-place"], answer: "It maintains the relative order of records with equal keys", explanation: "Stability is important when sorting objects with multiple attributes. For example, if you sort by last name, a stable sort will keep the original first-name order for people with the same last name." },
    { question: "The Traveling Salesman Problem (TSP) is typically solved using which algorithm to find an approximate solution?", options: ["Dynamic Programming", "Greedy (e.g., Nearest Neighbor)", "Divide and Conquer", "Backtracking"], answer: "Greedy (e.g., Nearest Neighbor)", explanation: "Since TSP is NP-hard, exact solutions are infeasible for large inputs. Heuristics like the Nearest Neighbor algorithm provide a fast, approximate (but not always optimal) solution by greedily choosing the closest unvisited city." },
    { question: "A Disjoint Set Union (DSU) data structure is primarily used for:", options: ["Sorting elements", "Searching for elements in a string", "Keeping track of a set of elements partitioned into a number of disjoint subsets", "Balancing trees"], answer: "Keeping track of a set of elements partitioned into a number of disjoint subsets", explanation: "DSU (or Union-Find) is highly efficient for problems involving partitions or connectivity, like detecting cycles in a graph during Kruskal's algorithm." },
    { question: "The problem of finding the longest common subsequence is a classic example of:", options: ["Greedy Algorithm", "Divide and Conquer", "Dynamic Programming", "Backtracking"], answer: "Dynamic Programming", explanation: "The optimal solution can be constructed by finding the optimal solutions to its overlapping subproblems, which is the hallmark of dynamic programming." },
    { question: "Which of these is NOT a valid rotation in an AVL tree?", options: ["Left Rotation", "Right Rotation", "Left-Right Rotation", "Up-Down Rotation"], answer: "Up-Down Rotation", explanation: "AVL trees use four types of rotations to rebalance: Left, Right, Left-Right (a left rotation followed by a right rotation), and Right-Left (a right rotation followed by a left rotation)." },
    { question: "What is a Fenwick Tree (or Binary Indexed Tree) used for?", options: ["Efficiently calculating prefix sums in a modifiable array", "Storing strings for autocomplete", "Visualizing graph data", "Sorting numbers with negative values"], answer: "Efficiently calculating prefix sums in a modifiable array", explanation: "A Fenwick Tree allows for both point updates and prefix sum queries in O(log N) time, making it faster than a simple array for these combined operations." },
    { question: "The 'stable marriage problem' is typically solved using which algorithm?", options: ["Kruskal's Algorithm", "Prim's Algorithm", "Gale-Shapley Algorithm", "Dijkstra's Algorithm"], answer: "Gale-Shapley Algorithm", explanation: "The Gale-Shapley algorithm is an iterative method that guarantees to find a stable matching between two sets of elements, given their preferences for each other." },
    { question: "Which data structure is most suitable for implementing caches (e.g., LRU Cache)?", options: ["A stack and a queue", "An array and a tree", "A hash map and a doubly linked list", "A heap and a graph"], answer: "A hash map and a doubly linked list", explanation: "A hash map provides O(1) access to cache items, while a doubly linked list allows for O(1) removal/insertion to manage the least-recently-used order." },
    { question: "In computational geometry, what is a 'convex hull'?", options: ["The largest cycle in a graph", "The shortest path that visits all points", "The smallest convex polygon that contains a given set of points", "A 3D shape with no indentations"], answer: "The smallest convex polygon that contains a given set of points", explanation: "Imagine stretching a rubber band around a set of points on a 2D plane; the shape the rubber band forms is the convex hull." },
    { question: "The time complexity of finding an element in a balanced skip list with N elements is:", options: ["O(1) on average", "O(log N) on average", "O(N) on average", "O(N log N) on average"], answer: "O(log N) on average", explanation: "Skip lists use probabilistic linking to create multiple levels of 'express lanes', achieving logarithmic time complexity for search, insert, and delete operations, similar to balanced trees." },
    { question: "What is the primary drawback of using recursion?", options: ["Code is harder to read", "Risk of stack overflow for deep recursion", "It is always slower than iteration", "It cannot solve all problems"], answer: "Risk of stack overflow for deep recursion", explanation: "Each recursive call adds a new frame to the call stack. If the recursion goes too deep without a base case, it can exhaust the stack memory, causing a stack overflow error." },
    { question: "Manacher's algorithm is an optimized solution for finding the:", options: ["Shortest common supersequence", "Longest palindromic substring", "Minimum spanning tree", "Maximum flow in a network"], answer: "Longest palindromic substring", explanation: "Manacher's algorithm cleverly solves the longest palindromic substring problem in linear O(N) time by avoiding redundant comparisons, a significant improvement over naive or DP solutions." },
    { question: "A 'Fibonacci Heap' provides a more efficient implementation for which algorithm compared to a binary heap?", options: ["Heap Sort", "Dijkstra's Algorithm", "Binary Search", "Building a hash table"], answer: "Dijkstra's Algorithm", explanation: "A Fibonacci heap has a more efficient (amortized O(1)) 'decrease key' operation, which is heavily used in algorithms like Dijkstra's and Prim's, improving their overall time complexity on dense graphs." },
    { question: "What does an 'adjacency matrix' representation of a graph excel at?", options: ["Saving space for sparse graphs", "Quickly checking if an edge exists between two vertices", "Iterating over all neighbors of a vertex", "Adding or removing vertices"], answer: "Quickly checking if an edge exists between two vertices", explanation: "To check for an edge between vertex i and j, you simply access the matrix at M[i][j], which is an O(1) operation. Its drawback is the O(V^2) space complexity." },
    { question: "The Edit Distance (or Levenshtein distance) problem is a classic application of:", options: ["Greedy Algorithms", "Dynamic Programming", "Backtracking", "Divide and Conquer"], answer: "Dynamic Programming", explanation: "The problem of finding the minimum number of edits (insert, delete, substitute) to change one word into another has overlapping subproblems, making it a perfect fit for a bottom-up dynamic programming approach." },
  ],
  dbms: [
    { question: "Which ACID property ensures that once a transaction is committed, it will remain so, even in the event of a power loss?", options: ["Atomicity", "Consistency", "Isolation", "Durability"], answer: "Durability", explanation: "Durability guarantees that committed transactions are permanently saved. The DBMS ensures that these changes survive any subsequent system failure." },
    { question: "What is the purpose of the third normal form (3NF)?", options: ["To eliminate repeating groups", "To eliminate redundant data using functional dependencies", "To eliminate transitive dependencies", "To handle multi-valued dependencies"], answer: "To eliminate transitive dependencies", explanation: "3NF builds on 2NF by removing transitive dependencies, where a non-key attribute depends on another non-key attribute, further reducing data redundancy." },
    { question: "A 'foreign key' constraint is used to:", options: ["Uniquely identify a record", "Link two tables together", "Index a column for faster queries", "Define a default value"], answer: "Link two tables together", explanation: "A foreign key in one table points to a primary key in another table, enforcing referential integrity between them." },
    { question: "Boyce-Codd Normal Form (BCNF) is a stricter version of:", options: ["1NF", "2NF", "3NF", "4NF"], answer: "3NF", explanation: "BCNF is a higher level of normalization than 3NF. A table is in BCNF if for every non-trivial functional dependency X -> Y, X is a superkey." },
    { question: "The `TRUNCATE` statement in SQL is a:", options: ["DML statement", "DCL statement", "TCL statement", "DDL statement"], answer: "DDL statement", explanation: "TRUNCATE is a Data Definition Language (DDL) statement. Unlike DELETE (DML), it's faster, cannot be rolled back easily, and resets identity columns." },
    { question: "Which type of index is most effective for range queries (e.g., `WHERE age > 30`)?", options: ["Hash Index", "B-Tree Index", "Full-text Index", "Spatial Index"], answer: "B-Tree Index", explanation: "B-Tree indexes store data in a sorted order, which makes them highly efficient for retrieving a range of values." },
    { question: "What does a `LEFT JOIN` do?", options: ["Returns all records from both tables", "Returns only matching records", "Returns all records from the left table and matched records from the right", "Returns all records from the right table"], answer: "Returns all records from the left table and matched records from the right", explanation: "A LEFT JOIN returns every row from the left (first) table, and if a matching row is found in the right table, it returns those values; otherwise, it returns NULL." },
    { question: "In database concurrency, what is a 'dirty read'?", options: ["Reading a value that has been modified but not yet committed", "Reading the same data twice and getting different values", "A transaction overwriting another uncommitted transaction's data", "A transaction being rolled back"], answer: "Reading a value that has been modified but not yet committed", explanation: "A dirty read occurs when a transaction reads data that has been written by another transaction that has not yet been committed. This can lead to inconsistent data if the writing transaction rolls back." },
    { question: "What is the primary function of a database transaction log?", options: ["To store user credentials", "To record all database modifications for recovery purposes", "To cache frequently accessed data", "To store query execution plans"], answer: "To record all database modifications for recovery purposes", explanation: "The transaction log is a critical component for disaster recovery. It sequentially records all transactions and database modifications, allowing the DBMS to roll forward or roll back changes." },
    { question: "Which SQL command is used to remove a user's access rights to a database object?", options: ["GRANT", "REMOVE", "REVOKE", "DELETE"], answer: "REVOKE", explanation: "The REVOKE command is used in SQL's Data Control Language (DCL) to take away previously granted permissions from a user or role." },
    { question: "What is a 'materialized view'?", options: ["A temporary table", "A stored query result that is physically stored and periodically updated", "A synonym for another table", "A view that cannot be updated"], answer: "A stored query result that is physically stored and periodically updated", explanation: "Unlike a standard view, which is just a stored query, a materialized view stores the result set physically. This can improve query performance but requires storage and a refresh strategy." },
    { question: "The CAP theorem in distributed databases refers to which three properties?", options: ["Consistency, Atomicity, Performance", "Consistency, Availability, Partition Tolerance", "Concurrency, Availability, Performance", "Consistency, Atomicity, Partition Tolerance"], answer: "Consistency, Availability, Partition Tolerance", explanation: "The CAP theorem states that a distributed data store can only provide two of the following three guarantees: Consistency, Availability, and Partition Tolerance." },
    { question: "What is database 'sharding'?", options: ["Encrypting the database", "Creating a backup of the database", "Horizontally partitioning data across multiple servers", "Vertically partitioning data within a single server"], answer: "Horizontally partitioning data across multiple servers", explanation: "Sharding is a database architecture pattern where rows of a table are split across multiple database instances (shards) to improve scalability and performance." },
    { question: "The SQL `COALESCE` function is used to:", options: ["Concatenate strings", "Return the first non-NULL value in a list", "Calculate the average of a set of values", "Convert a value to a different data type"], answer: "Return the first non-NULL value in a list", explanation: "COALESCE evaluates its arguments in order and returns the current value of the first expression that does not evaluate to NULL." },
    { question: "What is an 'execution plan' in a SQL database?", options: ["A schedule for database backups", "A sequence of steps used to access data for a SQL query", "A list of user permissions", "The source code of a stored procedure"], answer: "A sequence of steps used to access data for a SQL query", explanation: "When a SQL query is submitted, the database's query optimizer generates an execution plan, which is the most efficient method it determines to retrieve the requested data (e.g., which indexes to use, how to join tables)." },
  ],
  networks: [
    { question: "In the TCP header, what is the purpose of the 'Window Size' field?", options: ["To indicate the protocol version", "To specify the number of bytes the receiver is currently willing to accept", "To set the packet's time-to-live", "To ensure packet ordering"], answer: "To specify the number of bytes the receiver is currently willing to accept", explanation: "The Window Size field is fundamental to TCP's flow control mechanism. It tells the sender how much data it can transmit before receiving an acknowledgment." },
    { question: "Which routing protocol uses a link-state algorithm?", options: ["BGP", "RIP", "OSPF", "EIGRP"], answer: "OSPF", explanation: "Open Shortest Path First (OSPF) is a link-state routing protocol. Each router constructs a map of the connectivity to the network, and computes the best path to each destination." },
    { question: "What is the primary function of the Border Gateway Protocol (BGP)?", options: ["Routing within a single autonomous system", "Exchanging routing information between autonomous systems on the internet", "Resolving domain names to IP addresses", "Assigning IP addresses to devices"], answer: "Exchanging routing information between autonomous systems on the internet", explanation: "BGP is the core routing protocol of the Internet. It's an exterior gateway protocol used to make routing decisions between different networks (autonomous systems)." },
    { question: "In the context of the OSI model, at which layer does encryption (like TLS/SSL) primarily occur?", options: ["Layer 2 (Data Link)", "Layer 4 (Transport)", "Layer 6 (Presentation)", "Layer 7 (Application)"], answer: "Layer 6 (Presentation)", explanation: "The Presentation Layer is responsible for data translation, compression, and encryption/decryption. While TLS operates as a 'shim' between Transport and Application, its functions align with the Presentation Layer's responsibilities." },
    { question: "What is a 'NAT Traversal' problem?", options: ["The inability of a router to forward packets", "The difficulty for two devices behind different NATs to communicate directly", "A network loop caused by incorrect routing", "A security vulnerability in firewalls"], answer: "The difficulty for two devices behind different NATs to communicate directly", explanation: "Network Address Translation (NAT) hides private IP addresses. NAT traversal techniques (like STUN/TURN) are needed to establish peer-to-peer connections when both peers are behind NAT devices." },
    { question: "Which IPv6 address is the equivalent of the IPv4 loopback address 127.0.0.1?", options: ["FF02::1", "2001::", "FE80::", "::1"], answer: "::1", explanation: "The address 0:0:0:0:0:0:0:1, which is compressed to `::1`, is the loopback address in IPv6, used by a host to send a packet to itself." },
    { question: "The Address Resolution Protocol (ARP) is used to map:", options: ["A domain name to an IP address", "A port number to a process", "A Layer 3 (IP) address to a Layer 2 (MAC) address", "A MAC address to a VLAN ID"], answer: "A Layer 3 (IP) address to a Layer 2 (MAC) address", explanation: "When a device needs to send a packet to another device on the same local network, it uses ARP to find the destination's hardware (MAC) address from its known IP address." },
    { question: "What is the key difference between TCP and UDP?", options: ["TCP is faster than UDP", "UDP provides error correction", "TCP is connection-oriented, while UDP is connectionless", "UDP is used for web browsing"], answer: "TCP is connection-oriented, while UDP is connectionless", explanation: "TCP establishes a reliable connection, guaranteeing packet delivery, ordering, and error-checking. UDP is a 'fire-and-forget' protocol that offers speed at the expense of guaranteed delivery." },
    { question: "What is a 'subnet mask' used for?", options: ["To hide a network's IP address", "To divide an IP address into a network portion and a host portion", "To encrypt network traffic", "To identify the default gateway"], answer: "To divide an IP address into a network portion and a host portion", explanation: "A subnet mask is a 32-bit number that separates an IP address into its two main components: the network address, which identifies the network, and the host address, which identifies the specific device on that network." },
    { question: "A DNS 'MX' record is used for what purpose?", options: ["Mapping a domain to an IPv4 address", "Specifying the mail server responsible for a domain", "Providing canonical name aliases", "Storing arbitrary text data"], answer: "Specifying the mail server responsible for a domain", explanation: "Mail Exchanger (MX) records are critical for email delivery. They direct email sent to a domain to the correct mail servers that are authorized to accept messages for that domain." },
    { question: "What does 'Quality of Service' (QoS) refer to in networking?", options: ["The speed of the internet connection", "The security level of a network", "Mechanisms to manage network resources and prioritize traffic", "The physical durability of network cables"], answer: "Mechanisms to manage network resources and prioritize traffic", explanation: "QoS is a set of technologies that work on a network to manage its resources. It ensures that critical traffic (like video conferencing or VoIP) gets priority over less important traffic (like file downloads)." },
    { question: "Which of the following is a characteristic of a 'worm'?", options: ["It requires a host program to spread", "It is a self-replicating program that spreads across networks", "It only steals data without causing harm", "It can only be spread via email"], answer: "It is a self-replicating program that spreads across networks", explanation: "Unlike a virus, which attaches itself to an existing program, a worm is a standalone malware that replicates itself to spread to other computers, often exploiting network vulnerabilities." },
    { question: "The 'time-to-live' (TTL) field in an IP header is used to:", options: ["Synchronize clocks between routers", "Measure the round-trip time of a packet", "Prevent packets from circulating indefinitely in a network", "Indicate the priority of the packet"], answer: "Prevent packets from circulating indefinitely in a network", explanation: "TTL is an 8-bit field. Each router that forwards the packet decrements the TTL value by one. If the TTL value reaches zero, the packet is discarded, preventing it from getting stuck in routing loops forever." },
    { question: "What is the primary purpose of a VLAN?", options: ["To increase the physical speed of a LAN", "To segment a physical network into multiple logical networks", "To provide wireless access to a network", "To connect two different networks together"], answer: "To segment a physical network into multiple logical networks", explanation: "A Virtual LAN (VLAN) allows a network administrator to partition a single switched network, creating multiple distinct broadcast domains. This improves security and network management." },
    { question: "In the context of SSL/TLS, what is the role of the Certificate Authority (CA)?", options: ["To encrypt the data being sent", "To issue digital certificates and vouch for the identity of a website", "To route the network traffic", "To store a backup of the private key"], answer: "To issue digital certificates and vouch for the identity of a website", explanation: "A Certificate Authority is a trusted third party that signs and issues digital certificates. Browsers trust these CAs, and therefore trust the certificates they issue, which is fundamental to securing HTTPS connections." },
  ],
  os: [
    { question: "What is the primary purpose of a system call in an Operating System?", options: ["To allow user-level processes to request services from the kernel", "To shut down the computer", "To run a user's program", "To manage files on the disk"], answer: "To allow user-level processes to request services from the kernel", explanation: "System calls provide the interface between a process and the OS. Since processes run in user mode and can't access hardware directly, they use system calls to ask the kernel (running in kernel mode) to perform privileged operations for them." },
    { question: "In memory management, what is 'thrashing'?", options: ["A process rapidly reading from disk", "A security attack on the kernel", "Excessive paging activity, leading to low CPU utilization", "A process that cannot be terminated"], answer: "Excessive paging activity, leading to low CPU utilization", explanation: "Thrashing occurs when a process doesn't have enough memory frames allocated. It constantly swaps pages between RAM and disk, spending more time on paging than on actual execution, which severely degrades system performance." },
    { question: "The Banker's algorithm is used for which of the following?", options: ["Deadlock Prevention", "Deadlock Detection", "Deadlock Avoidance", "Process Scheduling"], answer: "Deadlock Avoidance", explanation: "The Banker's algorithm is a resource allocation and deadlock avoidance algorithm. It checks if granting a resource request would lead to a 'safe state'. If not, the request is denied until it becomes safe to grant." },
    { question: "What is the difference between a mutex and a semaphore?", options: ["There is no difference", "A mutex can be acquired by only one thread at a time, while a semaphore can be acquired by multiple threads", "A semaphore is used for signaling, while a mutex is for locking", "A mutex is faster than a semaphore"], answer: "A mutex can be acquired by only one thread at a time, while a semaphore can be acquired by multiple threads", explanation: "A mutex is a locking mechanism for mutual exclusion (one thread in a critical section). A counting semaphore maintains a count of available resources and can allow a specified number of threads to access a resource concurrently." },
    { question: "What is a 'zombie process'?", options: ["A process that has been hacked", "A process that cannot be killed", "A process that has completed execution but still has an entry in the process table", "A process running in the background"], answer: "A process that has completed execution but still has an entry in the process table", explanation: "When a child process terminates, its entry remains in the process table until the parent process reads its exit status. This terminated process is called a zombie." },
    { question: "Which process scheduling algorithm can lead to starvation for low-priority processes?", options: ["First-Come, First-Served (FCFS)", "Shortest Job First (SJF)", "Round Robin", "Priority Scheduling"], answer: "Priority Scheduling", explanation: "In a simple priority scheduling system, a continuous stream of high-priority processes can prevent low-priority processes from ever getting CPU time, a condition known as starvation." },
    { question: "What is the function of an Inode in a Unix-like file system?", options: ["It stores the file's name", "It stores metadata about a file, such as its size, owner, and pointers to its data blocks", "It is the first data block of a file", "It tracks which user is logged in"], answer: "It stores metadata about a file, such as its size, owner, and pointers to its data blocks", explanation: "An inode (index node) is a data structure that stores all information about a file object except for its name and its actual data. The name is stored in a directory entry, which points to the inode." },
    { question: "What is 'Copy-on-Write' (COW)?", options: ["A file backup mechanism", "A method for printing documents", "An optimization strategy where a shared resource is duplicated only when it's about to be modified", "A version control system"], answer: "An optimization strategy where a shared resource is duplicated only when it's about to be modified", explanation: "COW is used in memory management, particularly in the `fork()` system call. It allows the parent and child processes to initially share the same memory pages. A page is only copied when one of the processes tries to write to it." },
    { question: "A 'race condition' occurs when:", options: ["Two processes are competing for the CPU at the same time", "The behavior of a system depends on the unpredictable sequence or timing of other events", "A process runs faster than the I/O device", "The operating system runs out of memory"], answer: "The behavior of a system depends on the unpredictable sequence or timing of other events", explanation: "A race condition is a flaw in a concurrent system where the outcome of an operation depends on the non-deterministic timing of threads or processes. It often leads to corrupted data." },
    { question: "In the context of CPU scheduling, what is a 'context switch'?", options: ["Changing the CPU's clock speed", "The process of storing the state of a process so that it can be restored and resume execution later", "Switching from user mode to kernel mode", "A hardware interrupt"], answer: "The process of storing the state of a process so that it can be restored and resume execution later", explanation: "A context switch is the kernel performing a switch from one process to another. This involves saving the CPU registers and memory state of the current process and loading the state of the new process. It is computationally intensive overhead." },
    { question: "What is the main advantage of a microkernel architecture over a monolithic kernel?", options: ["It is faster", "It is more secure and reliable", "It uses less memory", "It has more built-in device drivers"], answer: "It is more secure and reliable", explanation: "In a microkernel, only the most fundamental services (like IPC and memory management) run in kernel mode. Other services (like device drivers and file systems) run as user-space processes. A failure in a user-space service won't crash the entire OS, improving reliability." },
    { question: "What is 'internal fragmentation' in memory management?", options: ["Unused memory that is outside of any allocated block", "Unused memory within an allocated memory block", "The total amount of free memory", "A security flaw in the memory allocator"], answer: "Unused memory within an allocated memory block", explanation: "Internal fragmentation occurs when a memory block allocated to a process is larger than the requested memory. The unused space within that allocated block is wasted." },
    { question: "Which of these is a preemptive scheduling algorithm?", options: ["First-Come, First-Served (FCFS)", "Shortest-Job-Next (SJN)", "Shortest Remaining Time First (SRTF)", "Cooperative Scheduling"], answer: "Shortest Remaining Time First (SRTF)", explanation: "SRTF is the preemptive version of SJN. If a new process arrives with a CPU burst length less than the remaining time of the current executing process, the scheduler preempts the current process and runs the new one." },
    { question: "What is a 'page fault'?", options: ["An error in a web page's code", "A hardware error in a memory module", "An exception raised when a process tries to access a memory page that is not currently in RAM", "A system crash caused by low memory"], answer: "An exception raised when a process tries to access a memory page that is not currently in RAM", explanation: "A page fault is not necessarily an error. It's an interrupt that tells the OS it needs to find the required page on the disk, load it into a free frame in RAM, and update the process's page table before resuming the process." },
    { question: "A 'journaling file system' (like ext4 or NTFS) improves reliability by:", options: ["Encrypting all data on the disk", "Compressing files to save space", "Keeping a log of changes that have not yet been fully committed to the main file system", "Storing files in a database"], answer: "Keeping a log of changes that have not yet been fully committed to the main file system", explanation: "A journaling file system maintains a 'journal' or log of the changes it intends to make. In case of a system crash, it can replay this log to bring the file system back to a consistent state, preventing data corruption." },
  ],
 dev: [
    { question: "What does the 'S' in SOLID principles stand for?", options: ["Single Responsibility Principle", "Software Design Principle", "Simple Design Pattern", "Standard Object Language"], answer: "Single Responsibility Principle", explanation: "The Single Responsibility Principle states that a class should have only one reason to change, meaning it should have only one job or responsibility." },
    { question: "Which design pattern ensures a class only has one instance and provides a global point of access to it?", options: ["Factory", "Observer", "Singleton", "Facade"], answer: "Singleton", explanation: "The Singleton pattern is a creational pattern that restricts the instantiation of a class to one single instance, which is useful for managing shared resources like database connections or loggers." },
    { question: "In version control with Git, what is the primary purpose of `git rebase`?", options: ["To merge two branches together creating a merge commit", "To temporarily store uncommitted changes", "To rewrite a branch's history by moving its base to a new commit", "To delete a branch"], answer: "To rewrite a branch's history by moving its base to a new commit", explanation: "`git rebase` is used to integrate changes from one branch onto another by replaying the commits from the source branch on top of the target branch, resulting in a linear history." },
    { question: "What is the core cycle of Test-Driven Development (TDD)?", options: ["Design-Code-Test", "Red-Green-Refactor", "Code-Test-Deploy", "Plan-Do-Check-Act"], answer: "Red-Green-Refactor", explanation: "The TDD cycle involves: 1. Red: Writing a failing test for a new feature. 2. Green: Writing the minimal amount of code to make the test pass. 3. Refactor: Cleaning up the code while ensuring all tests still pass." },
    { question: "Which architectural style contrasts with a Monolithic architecture by breaking down an application into smaller, independent services?", options: ["Layered Architecture", "Client-Server Architecture", "Microservices Architecture", "Event-Driven Architecture"], answer: "Microservices Architecture", explanation: "Microservices is an architectural style that structures an application as a collection of loosely coupled, independently deployable services, each responsible for a specific business capability." },
    { question: "The 'L' in SOLID, the Liskov Substitution Principle, states that:", options: ["Objects of a superclass should be replaceable with objects of a subclass without affecting correctness", "Code should be open for extension but closed for modification", "Large interfaces should be split into smaller ones", "High-level modules should not depend on low-level modules"], answer: "Objects of a superclass should be replaceable with objects of a subclass without affecting correctness", explanation: "This principle ensures that a subclass can stand in for its superclass without causing errors, which is fundamental to building reliable object-oriented systems." },
    { question: "What is the main advantage of Continuous Integration (CI)?", options: ["It deploys code directly to production", "It automates the testing of every code change", "It reduces the frequency of code merges, making them larger and more manageable", "It allows developers to detect and fix integration issues early and frequently"], answer: "It allows developers to detect and fix integration issues early and frequently", explanation: "By automatically building and testing every commit, CI helps teams identify integration problems as soon as they are introduced, preventing them from escalating." },
    { question: "The Factory Method design pattern is primarily used to:", options: ["Create a single instance of an object", "Define an interface for creating an object, but let subclasses decide which class to instantiate", "Attach additional responsibilities to an object dynamically", "Provide a simplified interface to a complex subsystem"], answer: "Define an interface for creating an object, but let subclasses decide which class to instantiate", explanation: "The Factory Method is a creational pattern that provides a way to delegate the instantiation logic to child classes, promoting loose coupling." },
    { question: "What is 'Code Refactoring'?", options: ["Rewriting code from scratch", "Adding new features to existing code", "The process of restructuring existing computer code without changing its external behavior", "Debugging code to find errors"], answer: "The process of restructuring existing computer code without changing its external behavior", explanation: "Refactoring improves non-functional attributes of the software, such as readability, complexity, and maintainability, making it easier to build upon in the future." },
    { question: "In RESTful API design, which HTTP method is idempotent and used to completely replace a resource?", options: ["POST", "GET", "PUT", "PATCH"], answer: "PUT", explanation: "PUT is idempotent, meaning multiple identical requests have the same effect as a single request. It is used to replace an entire resource at a specific URI. PATCH, in contrast, is used for partial updates." },
    { question: "The Dependency Inversion Principle (the 'D' in SOLID) states that:", options: ["Low-level modules should depend on high-level modules", "High-level modules should not depend on low-level modules; both should depend on abstractions", "Classes should only depend on their direct parent", "Circular dependencies should be avoided"], answer: "High-level modules should not depend on low-level modules; both should depend on abstractions", explanation: "This principle decouples software modules by introducing an abstraction (like an interface) between them, making the system more flexible and easier to change." },
    { question: "What is the primary purpose of unit testing?", options: ["To test the integration between multiple components", "To verify that individual units of source code (e.g., functions, methods) work as designed", "To test the application from an end-user's perspective", "To test the performance of the system under load"], answer: "To verify that individual units of source code (e.g., functions, methods) work as designed", explanation: "Unit tests isolate the smallest testable parts of an application and validate their behavior independently from other parts." },
    { question: "Which Software Development Life Cycle (SDLC) model is characterized by a sequential design process, often compared to a cascading waterfall?", options: ["Agile", "Spiral", "Waterfall", "V-Model"], answer: "Waterfall", explanation: "The Waterfall model is a classic, linear model where each phase (Requirements, Design, Implementation, Testing, etc.) must be fully completed before moving on to the next." },
    { question: "What does 'DRY' stand for in software development?", options: ["Don't Repeat Yourself", "Don't Rush Your-code", "Data Replication Yields-errors", "Develop, Review, Yield"], answer: "Don't Repeat Yourself", explanation: "The DRY principle aims to reduce repetition of software patterns by replacing it with abstractions or using data normalization to avoid redundancy. 'Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.'" },
    { question: "The Observer design pattern is useful for:", options: ["Creating objects without specifying their exact classes", "Defining a one-to-many dependency between objects so that when one object changes state, all its dependents are notified", "Wrapping an object to provide new functionality", "Simplifying the interface of a complex system"], answer: "Defining a one-to-many dependency between objects so that when one object changes state, all its dependents are notified", explanation: "The Observer pattern is a behavioral pattern commonly used for implementing event-handling systems, where a 'subject' notifies multiple 'observers'." },
    { question: "What is the role of a 'linter' in the development process?", options: ["To compile code into machine language", "To automatically format code to a specific style guide", "To statically analyze code to find programming errors, bugs, and stylistic errors", "To run unit tests"], answer: "To statically analyze code to find programming errors, bugs, and stylistic errors", explanation: "A linter flags potential issues in code without actually executing it, helping developers maintain code quality and adhere to coding standards." },
    { question: "What does API stand for?", options: ["Advanced Programming Interface", "Application Programming Interface", "Abstract Process Interaction", "Application Protocol Integration"], answer: "Application Programming Interface", explanation: "An API is a set of definitions and protocols for building and integrating application software, defining the kinds of calls or requests that can be made, how to make them, the data formats that should be used, etc." },
    { question: "In `git`, what is the difference between `git fetch` and `git pull`?", options: ["They are identical", "`git fetch` downloads remote changes but does not merge them; `git pull` does both", "`git pull` downloads remote changes; `git fetch` pushes local changes", "`git fetch` is for branches, `git pull` is for tags"], answer: "`git fetch` downloads remote changes but does not merge them; `git pull` does both", explanation: "`git fetch` updates your remote-tracking branches, allowing you to see what others have done without impacting your local work. `git pull` is essentially a `git fetch` followed immediately by a `git merge`." },
    { question: "The term 'technical debt' refers to:", options: ["The monetary cost of software licenses", "The implied cost of rework caused by choosing an easy, limited solution now instead of using a better approach that would take longer", "The time spent debugging code", "Hardware depreciation"], answer: "The implied cost of rework caused by choosing an easy, limited solution now instead of using a better approach that would take longer", explanation: "Technical debt is a metaphor. Just like financial debt, it accrues 'interest' over time, making future changes more difficult and costly if the debt isn't 'repaid' by refactoring." },
    { question: "What is the primary goal of the Interface Segregation Principle (the 'I' in SOLID)?", options: ["To ensure all interfaces are implemented correctly", "To prevent classes from depending on methods they do not use", "To make all interfaces as generic as possible", "To combine multiple small interfaces into one large one"], answer: "To prevent classes from depending on methods they do not use", explanation: "This principle suggests that clients should not be forced to depend on interfaces they do not use. It favors creating many smaller, client-specific interfaces over one large, general-purpose interface." },
    { question: "Which of the following is NOT a type of software testing?", options: ["Unit Testing", "Integration Testing", "Reductive Testing", "End-to-End Testing"], answer: "Reductive Testing", explanation: "While terms like deductive or inductive reasoning apply to debugging, 'Reductive Testing' is not a standard category in software quality assurance. Unit, Integration, and End-to-End are all fundamental testing levels." },
    { question: "The 'Decorator' design pattern is structurally similar to which other pattern, but differs in intent?", options: ["Adapter", "Proxy", "Composite", "Facade"], answer: "Proxy", explanation: "Both Decorator and Proxy have similar structures (they 'wrap' another object). However, Decorator adds responsibilities to an object, while Proxy controls access to it." },
    { question: "What is 'YAGNI' a principle of?", options: ["You Always Get New Ideas", "You Aren't Gonna Need It", "Your Application's Growth is Non-negotiable", "Yesterday's Awesome, Great, Now Innovate"], answer: "You Aren't Gonna Need It", explanation: "YAGNI is a principle from Extreme Programming (XP) that states a programmer should not add functionality until it is deemed necessary, preventing the development of features that aren't actually used." },
    { question: "What does it mean for a function to be a 'pure function'?", options: ["It does not take any arguments", "It only works with numbers", "Its return value is the same for the same arguments and it has no side effects", "It is written in a functional programming language"], answer: "Its return value is the same for the same arguments and it has no side effects", explanation: "Pure functions are predictable. Given the same input, they always return the same output and don't modify any state outside their own scope (like changing a global variable or writing to a file)." },
    { question: "In a CI/CD pipeline, what is the primary role of the Continuous Deployment (CD) stage?", options: ["To run all unit tests", "To build the application artifacts", "To automatically deploy every change that passes the automated tests to production", "To manually approve changes for release"], answer: "To automatically deploy every change that passes the automated tests to production", explanation: "Continuous Deployment is the final stage that automates the release of a successful build to the production environment, enabling very rapid release cycles." },
    { question: "The 'Builder' design pattern is most useful when:", options: ["There is only one type of object to create", "You need to create complex objects step by step", "You need to copy an existing object", "You need to control access to an object"], answer: "You need to create complex objects step by step", explanation: "The Builder pattern separates the construction of a complex object from its representation, so the same construction process can create different representations. It's ideal for objects with many configuration options." },
    { question: "What is 'semantic versioning' (SemVer)?", options: ["A versioning scheme that uses dates (e.g., 2023.10.26)", "A formal convention for assigning version numbers in the format MAJOR.MINOR.PATCH", "A method for versioning database schemas", "A proprietary versioning system"], answer: "A formal convention for assigning version numbers in the format MAJOR.MINOR.PATCH", explanation: "In SemVer 2.0.0, you increment the: 1. MAJOR version for incompatible API changes, 2. MINOR version for adding functionality in a backward-compatible manner, and 3. PATCH version for backward-compatible bug fixes." },
    { question: "The 'Open/Closed Principle' (the 'O' in SOLID) encourages developers to:", options: ["Leave code open to everyone", "Write software entities that are open for extension, but closed for modification", "Close a module once it is tested", "Keep all class members open (public)"], answer: "Write software entities that are open for extension, but closed for modification", explanation: "This means you should be able to add new functionality to a module without changing its existing source code, typically by using abstractions like interfaces and polymorphism." },
    { question: "What is the primary characteristic of a 'stateless' application or service?", options: ["It cannot be run", "It does not store any client session data on the server", "It has no user interface", "It runs on a single server"], answer: "It does not store any client session data on the server", explanation: "In a stateless architecture, each request from a client to the server must contain all the information needed to understand and complete the request. The server does not store any context about the client's session between requests." },
    { question: "Which of the following best describes 'dependency injection'?", options: ["A module fetching its own dependencies", "A design pattern in which an object receives other objects that it depends on, rather than creating them itself", "The act of adding a new library to a project", "A hardware-level process"], answer: "A design pattern in which an object receives other objects that it depends on, rather than creating them itself", explanation: "Dependency Injection is a form of Inversion of Control (IoC). It moves the responsibility of creating dependencies out of the class itself, leading to more modular, testable, and maintainable code." },
  ],

  agile: [
    { question: "What are the three pillars of Scrum theory?", options: ["Planning, Execution, Review", "Communication, Collaboration, Commitment", "Transparency, Inspection, Adaptation", "Product, Process, People"], answer: "Transparency, Inspection, Adaptation", explanation: "Scrum is founded on empirical process control theory. Transparency ensures all aspects of the process are visible. Inspection allows for checking progress. Adaptation involves adjusting the process to minimize problems." },
    { question: "Who is responsible for maximizing the value of the product resulting from the work of the Development Team in Scrum?", options: ["Scrum Master", "Project Manager", "Lead Developer", "Product Owner"], answer: "Product Owner", explanation: "The Product Owner is the sole person responsible for managing the Product Backlog, which includes prioritizing items to best achieve goals and missions." },
    { question: "What is the recommended time-box for a Daily Scrum meeting?", options: ["5 minutes", "15 minutes", "30 minutes", "60 minutes"], answer: "15 minutes", explanation: "The Daily Scrum is a brief, 15-minute event for the Development Team to synchronize activities and create a plan for the next 24 hours. It is not a status meeting for stakeholders." },
    { question: "Which of the following best describes a 'User Story'?", options: ["A detailed technical specification", "A formal contract for a feature", "An informal, general explanation of a software feature written from the perspective of the end user", "A bug report from a user"], answer: "An informal, general explanation of a software feature written from the perspective of the end user", explanation: "User stories typically follow the format: 'As a [type of user], I want [some goal] so that [some reason].' They are a tool to facilitate conversation about a requirement." },
    { question: "In Kanban, what is the primary purpose of a 'WIP Limit' (Work in Progress Limit)?", options: ["To measure team velocity", "To prevent overloading the team and improve the flow of work", "To track the total number of tasks completed", "To assign tasks to team members"], answer: "To prevent overloading the team and improve the flow of work", explanation: "By limiting the amount of work in any given stage of the workflow, WIP limits help to identify bottlenecks and encourage the team to focus on completing tasks before starting new ones." },
    { question: "What is the main purpose of the Sprint Retrospective in Scrum?", options: ["To demonstrate the product increment to stakeholders", "To plan the work for the next Sprint", "To inspect the past Sprint with regard to people, relationships, process, and tools, and create a plan for improvements", "To provide a status update to management"], answer: "To inspect the past Sprint with regard to people, relationships, process, and tools, and create a plan for improvements", explanation: "The Sprint Retrospective is an opportunity for the Scrum Team to inspect itself and create a plan for improvements to be enacted during the next Sprint." },
    { question: "Which of the four values of the Agile Manifesto is 'Responding to change over following a plan'?", options: ["First", "Second", "Third", "Fourth"], answer: "Fourth", explanation: "The fourth value of the Agile Manifesto emphasizes that while planning is valuable, the ability to respond to change is more valuable because requirements and environments are expected to evolve." },
    { question: "What does a 'burndown chart' visualize?", options: ["The number of features added over time", "The amount of work remaining in a Sprint or release over time", "The team's happiness and morale", "The project's budget"], answer: "The amount of work remaining in a Sprint or release over time", explanation: "A burndown chart is a graphical representation of work left to do versus time. The outstanding work (or backlog) is often on the vertical axis, with time along the horizontal." },
    { question: "In Extreme Programming (XP), what is 'Pair Programming'?", options: ["Two developers reviewing each other's code", "Two developers working together at one workstation", "A developer working on two tasks at once", "A system where every piece of code is written twice"], answer: "Two developers working together at one workstation", explanation: "In pair programming, one developer (the driver) writes code while the other (the navigator) observes, reviews, and provides feedback, leading to higher quality code and knowledge sharing." },
    { question: "Who is responsible for removing impediments to the Development Team's progress in Scrum?", options: ["The Development Team", "The Product Owner", "A Manager", "The Scrum Master"], answer: "The Scrum Master", explanation: "A key service the Scrum Master provides to the Development Team is removing impediments to their progress. This is part of their role as a servant-leader." },
    { question: "What is the 'Definition of Done' (DoD)?", options: ["A list of tasks for the next Sprint", "The Product Owner's acceptance of a story", "A shared understanding of what it means for work to be complete and potentially releasable", "The end of the project timeline"], answer: "A shared understanding of what it means for work to be complete and potentially releasable", explanation: "The DoD is a formal description of the state of the Increment when it meets the quality measures required for the product. It ensures everyone on the Scrum Team knows exactly what is expected of a completed piece of work." },
    { "question": "Which of the following is NOT one of the 12 Principles behind the Agile Manifesto?", "options": ["'Our highest priority is to satisfy the customer.'", "'Welcome changing requirements, even late in development.'", "'Deliver working software frequently.'", "'Comprehensive documentation is the primary measure of progress.'"], "answer": "'Comprehensive documentation is the primary measure of progress.'", "explanation": "The Agile Manifesto values 'Working software over comprehensive documentation.' The primary measure of progress is the delivery of functional software, not extensive documentation." },
    { question: "In Scrum, the Product Backlog is ordered by:", options: ["The Development Team", "The Scrum Master", "Priority, value, and dependency, as determined by the Product Owner", "Alphabetical order"], answer: "Priority, value, and dependency, as determined by the Product Owner", explanation: "The Product Owner is responsible for ordering the items in the Product Backlog to best achieve goals and missions. The Development Team can provide input, but the PO has the final say." },
    { question: "What is 'Velocity' in an Agile context?", options: ["How fast an individual developer codes", "The project's deadline", "A measure of the amount of work a team can tackle during a single Sprint", "The number of bugs found in a Sprint"], answer: "A measure of a team to tackle during a single Sprint", explanation: "Velocity is calculated at the end of a Sprint by totaling the points of all fully completed user stories. It is used for forecasting and planning future Sprints." },
    { question: "The primary purpose of a Sprint Review is to:", options: ["Critique the performance of the Development Team", "Inspect the Increment and adapt the Product Backlog if needed", "Plan the next Sprint's work", "Obtain formal sign-off from the project sponsor"], answer: "Inspect the Increment and adapt the Product Backlog if needed", explanation: "During the Sprint Review, the Scrum Team and stakeholders collaborate about what was done in the Sprint. Based on that and any changes to the Product Backlog, attendees collaborate on the next things that could be done." },
    { question: "Kanban is a method for managing knowledge work with an emphasis on:", options: ["Strict time-boxed iterations", "Just-in-time delivery and visualizing workflow", "Detailed upfront planning", "Assigning roles and responsibilities"], answer: "Just-in-time delivery and visualizing workflow", explanation: "Kanban focuses on visualizing the workflow on a Kanban board, limiting work in progress (WIP), and managing the flow of work to deliver value continuously." },
    { question: "What is a 'Spike' in Agile development?", options: ["A sudden increase in bugs", "A type of user story that is dedicated to research, investigation, or prototyping", "A meeting to resolve a technical conflict", "A feature that is quickly developed"], answer: "A type of user story that is dedicated to research, investigation, or prototyping", explanation: "A spike is used to gain the knowledge necessary to reduce risk, understand a requirement, or increase the reliability of a story estimate. The output of a spike is knowledge, not a shippable product feature." },
    { question: "What does the acronym 'INVEST' stand for in the context of good user stories?", options: ["Independent, Negotiable, Valuable, Estimable, Small, Testable", "Innovative, Necessary, Viable, Executable, Simple, Traceable", "Immediate, Non-ambiguous, Verifiable, Essential, Scalable, Trustworthy", "Informal, Navigable, Valuable, Executable, Sized-appropriately, Testable"], answer: "Independent, Negotiable, Valuable, Estimable, Small, Testable", explanation: "The INVEST model provides a useful checklist for creating effective user stories that are ready for development." },
    { question: "In Lean-Agile principles, what is considered the most significant form of 'waste'?", options: ["Bugs", "Partially done work", "Meetings", "Documentation"], answer: "Partially done work", explanation: "Inspired by Lean manufacturing, partially done work (or inventory) is considered a major form of waste because it represents sunk cost with no delivered value and can hide quality problems." },
    { question: "What happens if the Development Team cannot complete all the work in its Sprint Backlog by the end of the Sprint?", options: ["The Sprint is extended until all work is finished", "The team works overtime to complete it", "The incomplete items are moved back to the Product Backlog for re-evaluation and re-prioritization", "The Sprint fails and the project is re-planned"], answer: "The incomplete items are moved back to the Product Backlog for re-evaluation and re-prioritization", explanation: "Only 'Done' items are demonstrated in the Sprint Review. Any unfinished work is returned to the Product Backlog, and the Product Owner decides what to do with it. This maintains transparency and a sustainable pace." },
    { question: "Which role is NOT part of a standard Scrum Team?", options: ["Product Owner", "Project Manager", "Development Team", "Scrum Master"], answer: "Project Manager", explanation: "Scrum Teams are self-organizing and cross-functional. The responsibilities traditionally held by a project manager are distributed among the three roles of the Scrum Team." },
    { question: "A 'burn-up' chart is different from a 'burndown' chart because it shows:", options: ["Only the work remaining", "The total scope of the project and the work completed to date", "The number of team members available", "The project budget spent"], answer: "The total scope of the project and the work completed to date", explanation: "A burn-up chart has two lines: one for the total work in scope, and one for the work completed. This makes it very effective at visualizing scope changes over time, something a burndown chart hides." },
    { question: "The concept of 'Sustainable Pace' is a principle from which Agile methodology?", options: ["Scrum", "Kanban", "Extreme Programming (XP)", "Crystal"], answer: "Extreme Programming (XP)", explanation: "One of the core principles of XP is that the team should not work excessive overtime. A sustainable pace ensures the team can maintain high quality and productivity indefinitely without burning out." },
    { question: "What is the primary output of a Sprint Planning meeting?", options: ["The Sprint Goal and the Sprint Backlog", "A detailed project plan for the entire release", "The Definition of Done", "A list of impediments"], answer: "The Sprint Goal and the Sprint Backlog", explanation: "The Sprint Planning event results in two key artifacts: a Sprint Goal that defines the objective of the Sprint, and a Sprint Backlog, which is the set of Product Backlog items selected for the Sprint plus a plan for delivering them." },
    { question: "Agile Estimation techniques like 'Planning Poker' use story points instead of hours to:", options: ["Provide a precise timeline to management", "Account for complexity, uncertainty, and effort, rather than just duration", "Make estimating faster", "Bill clients for work done"], answer: "Account for complexity, uncertainty, and effort, rather than just duration", explanation: "Story points are a relative measure of size. They abstract the estimate away from specific time commitments, acknowledging that the effort to complete a task involves more than just the hours it takes to code." },
    { question: "What does it mean for a team to be 'cross-functional'?", options: ["The team members are from different departments", "Each team member has a specialized role", "The team as a whole has all the skills necessary to create a 'Done' product Increment", "The team works on multiple projects at once"], answer: "The team as a whole has all the skills necessary to create a 'Done' product Increment", explanation: "A cross-functional team has all the competencies (e.g., development, testing, design, operations) needed to accomplish their work without depending on others not part of the team." },
    { question: "The 'Cone of Uncertainty' in software project management illustrates that:", options: ["Projects are always late", "Estimates become more accurate as the project progresses and more is known", "The number of bugs increases over time", "Team velocity is unpredictable"], answer: "Estimates become more accurate as the project progresses and more is known", explanation: "At the beginning of a project, very little is known, so estimates are highly uncertain. As the team builds, learns, and gets feedback, the uncertainty reduces, and estimates become more reliable." },
    { question: "What is the main idea behind 'Continuous Attention to Technical Excellence and Good Design' in the Agile Manifesto?", options: ["The team must use the latest technology", "Good design enhances agility and prevents technical debt from slowing the team down", "The architecture must be fully designed upfront", "Only senior developers should work on design"], answer: "Good design enhances agility and prevents technical debt from slowing the team down", explanation: "This principle highlights that focusing on technical quality is not a one-time activity but a continuous effort. A clean, well-designed codebase is easier and faster to change, which is the essence of agility." },
    { question: "In Kanban, what is the 'pull system'?", options: ["The manager 'pulls' team members into meetings", "Work is 'pulled' into the next stage of the workflow only when there is capacity to handle it", "The product owner 'pulls' stories from the backlog", "The team 'pulls' an all-nighter to meet a deadline"], answer: "Work is 'pulled' into the next stage of the workflow only when there is capacity to handle it", explanation: "A pull system is a core tenet of Lean and Kanban. Instead of work being 'pushed' onto the team, a team pulls work from the previous stage when they are ready, which helps manage flow and prevent bottlenecks." },
    { question: "What is an 'Information Radiator' in an Agile context?", options: ["A server that sends email notifications", "The person on the team who communicates status", "A large, highly visible display of key team information, like a Kanban board or a burndown chart", "A project management software tool"], answer: "A large, highly visible display of key team information, like a Kanban board or a burndown chart", explanation: "An information radiator is a physical or digital display posted in a place where the team and stakeholders can easily see it. It provides immediate, transparent information about the project's status without requiring someone to ask for it." },
  ]
};

export const quizData = (subject, numQuestions = 15) => {
    const questions = allQuestions[subject];
    if (!questions || questions.length === 0) {
        return [];
    }
    const shuffled = shuffleArray([...questions]);
    return shuffled.slice(0, numQuestions);
};
